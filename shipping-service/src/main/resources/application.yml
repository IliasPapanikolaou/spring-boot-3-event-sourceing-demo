server:
  port: 8081

spring:
  application:
    name: shipping-service
  data:
    mongodb:
      host: localhost
      port: 27017
      database: order-service
  kafka:
    bootstrap-servers: localhost:9092
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      acks: all   # Ensure all replicas acknowledge the message
#      retries: 3  # Number of retries in case of failure
#      batch-size: 16384 # Batch size in bytes
#      buffer-memory: 33554432 #Buffer size in memory
#      properties:
#        linger.ms: 1  # Time to wait before sending a batch
#        security.protocol: PLAINTEXT # Define security protocol (PLAINTEXT or SSL)
    consumer:
      group-id: shipping-service    # GroupId for the consumer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer  # Deserializer for the key
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer  # Wraps JsonDeserializer for error handling
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"  # You can restrict this to your package for added security

order:
  event:
    topicName: order-events